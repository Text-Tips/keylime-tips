Packages required to run keylime tests:
---------------------------------------
git clone https://github.com/keylime/rust-keylime /var/tmp/rust-keylime_sources
dnf install -y cargo tpm2-tss-devel rust-clang-sys-devel clang16-devel kernel-headers clang16-libs kernel-headers clang-libs cmake llvm-devel llvm-devel clang16-devel rust-clang-sys+clang_17_0-devel zeromq-devel
# Execution with code coverage:
$ KEYLIME_RUST_CODE_COVERAGE=1 ./test.sh 

Format check in rust-keylime:
-----------------------------
cargo fmt --all --check

Modify vendor for rust based package:
-------------------------------------
Modify the patch to change versions in Cargo.toml and Cargo.lock
Download the tarball (use spectool -gf keylime-agent-rust.spec), unzip it and enter the directory with a cd
Apply the patch (use patch -p1 < ../rust-keylime-metadata.patch)
Generate the provider, eliminating everything so you can't ship (command line)
Generate tarball as provider (I use tar provider jcf rust-keylime-0.2.7-vendor.tar.xz, obviously adjusting to version)
Change the tarball to root and load it as source with Fedpkg or centpkg new-sources
# Vendor generator:
cargo vendor-filterer --all-features --platform x86_64-unknown-linux-gnu --platform powerpc64le-unknown-linux-gnu --platform aarch64-unknown-linux-gnu --platform i686-unknown-linux-gnu --platform s390x-unknown-linux-gnu --exclude-crate-path "libloading#tests"
# using this thing: cargo-vendor-filterer : https://github.com/coreos/cargo-vendor-filterer

Github issue templates:
-----------------------
# Example of some templates included:
https://github.com/keylime/keylime/pull/1751/files

Execution of coverage tests through Cargo tarpaulin (Rust):
-----------------------------------------------------------
cargo tarpaulin
cargo tarpaulin --out Html
cargo tarpaulin --out Json

Generation default configuration for verifier:
----------------------------------------------
mkdir config && PYTHONPATH=. python3 keylime/cmd/convert_config.py --templates templates/  --out config --default

Run verifier for Push Model:
----------------------------
git clone git@github.com:keylime/keylime.git
cd keylime
git fetch origin pull/1693/head:push-attestation
git checkout push-attestation
sudo python3 -m keylime.cmd.verifier

Run Registrar for Push Model:
-----------------------------
sudo python3 -m keylime.cmd.registrar

How tests are executed on Keylime agent at CI phase:
----------------------------------------------------
cargo tarpaulin --verbose --target-dir target/tarpaulin --workspace --exclude-files 'target/*' --ignore-panics --ignore-tests --out Xml --out Html --all-features -- --test-threads=1
cargo test --features testing  -p keylime_push_model_agent --bin keylime_push_model_agent -- --nocapture

Verifier certificate path:
--------------------------
/var/lib/keylime/cv_ca
# In particular the ones to use to "fake" agent:
client-cert.crt
client-private.pem
client-public.pem

Curl insecure mode:
-------------------
curl --verbose -k https://127.0.0.1:8881/agents/1234/attestations
# More information on certificate setup:
https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/security_hardening/assembly_ensuring-system-integrity-with-keylime_security-hardening#con_how-keylime-works_assembly_ensuring-system-integrity-with-keylime

Add a particular package to a particular binary:
----------------------------------------------------
cargo add zeroize --package keylime_push_model_agent

Additional way to test a particular test:
-----------------------------------------
cargo test structures
cargo test structures::evidence_handling::tests
cargo test structures::evidence_handling::tests::deserialize_evidence_handling_request
cargo test structures::evidence_handling::tests::deserialize_evidence_handling_request -- --nocapture

Execution of tests with extra debugging:
----------------------------------------
RUST_BACKTRACE=1 cargo test
RUST_BACKTRACE=full cargo test

Update packages through cargo:
------------------------------
# Update everything
cargo update
# Update a particular package
cargo update url
# Can specify more than one package to update
cargo update url reqwest
# Update to a particular version
cargo update url --precise 2.5.3

Retest failed CI GH actions on rust-keylime:
--------------------------------------------
/packit retest-failed

How to rebase through dependabot:
---------------------------------
@dependabot rebase

Executing tests for Registrar/Verifier:
---------------------------------------
tox -v -e 'mypy'

Check registrations with tenant:
--------------------------------
keylime_tenant -c reglist
