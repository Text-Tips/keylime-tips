Packages required to run keylime tests:
---------------------------------------
git clone https://github.com/keylime/rust-keylime /var/tmp/rust-keylime_sources
dnf install -y cargo tpm2-tss-devel rust-clang-sys-devel clang16-devel kernel-headers clang16-libs kernel-headers clang-libs cmake llvm-devel llvm-devel clang16-devel rust-clang-sys+clang_17_0-devel zeromq-devel
# Execution with code coverage:
$ KEYLIME_RUST_CODE_COVERAGE=1 ./test.sh

Format check in rust-keylime:
-----------------------------
cargo fmt --all --check

Modify vendor for rust based package:
-------------------------------------
Modify the patch to change versions in Cargo.toml and Cargo.lock
Download the tarball (use spectool -gf keylime-agent-rust.spec), unzip it and enter the directory with a cd
Apply the patch (use patch -p1 < ../rust-keylime-metadata.patch)
Generate the provider, eliminating everything so you can't ship (command line)
Generate tarball as provider (I use tar provider jcf rust-keylime-0.2.7-vendor.tar.xz, obviously adjusting to version)
Change the tarball to root and load it as source with Fedpkg or centpkg new-sources
# Vendor generator:
cargo vendor-filterer --all-features --platform x86_64-unknown-linux-gnu --platform powerpc64le-unknown-linux-gnu --platform aarch64-unknown-linux-gnu --platform i686-unknown-linux-gnu --platform s390x-unknown-linux-gnu --exclude-crate-path "libloading#tests"
# using this thing: cargo-vendor-filterer : https://github.com/coreos/cargo-vendor-filterer

Github issue templates:
-----------------------
# Example of some templates included:
https://github.com/keylime/keylime/pull/1751/files

Execution of coverage tests through Cargo tarpaulin (Rust):
-----------------------------------------------------------
cargo tarpaulin
cargo tarpaulin --out Html
cargo tarpaulin --out Json
# Execute and open report
cargo tarpaulin  --out Html; firefox tarpaulin-report.html
# Execute it for a particular feature:
cargo tarpaulin --out Html --features testing
# Execute it for a particular feature and open report:
cargo tarpaulin --out Html --features testing; firefox tarpaulin-report.html

Generation default configuration for verifier:
----------------------------------------------
# Install packages for configuration:
dnf install -y python3-jinja2
# Generate configuration in config/ directory:
mkdir config && PYTHONPATH=. python3 keylime/cmd/convert_config.py --templates templates/  --out config --default

Run verifier for Push Model:
----------------------------
git clone git@github.com:keylime/keylime.git
cd keylime
git fetch origin pull/1693/head:push-attestation
git checkout push-attestation
sudo python3 -m keylime.cmd.verifier

Run Registrar for Push Model:
-----------------------------
sudo python3 -m keylime.cmd.registrar

How tests are executed on Keylime agent at CI phase:
----------------------------------------------------
cargo tarpaulin --verbose --target-dir target/tarpaulin --workspace --exclude-files 'target/*' --ignore-panics --ignore-tests --out Xml --out Html --all-features -- --test-threads=1
cargo test --features testing  -p keylime_push_model_agent --bin keylime_push_model_agent -- --nocapture

Verifier certificate path:
--------------------------
/var/lib/keylime/cv_ca
# In particular the ones to use to "fake" agent:
client-cert.crt
client-private.pem
client-public.pem

Curl insecure mode:
-------------------
curl --verbose -k https://127.0.0.1:8881/agents/1234/attestations
# More information on certificate setup:
https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/9/html/security_hardening/assembly_ensuring-system-integrity-with-keylime_security-hardening#con_how-keylime-works_assembly_ensuring-system-integrity-with-keylime

Add a particular package to a particular binary:
----------------------------------------------------
cargo add zeroize --package keylime_push_model_agent

Additional way to test a particular test:
-----------------------------------------
cargo test structures
cargo test structures::evidence_handling::tests
cargo test structures::evidence_handling::tests::deserialize_evidence_handling_request
cargo test structures::evidence_handling::tests::deserialize_evidence_handling_request -- --nocapture

Execution of tests with extra debugging:
----------------------------------------
RUST_BACKTRACE=1 cargo test
RUST_BACKTRACE=full cargo test

Update packages through cargo:
------------------------------
# Update everything
cargo update
# Update a particular package
cargo update url
# Can specify more than one package to update
cargo update url reqwest
# Update to a particular version
cargo update url --precise 2.5.3

Retest failed CI GH actions on rust-keylime:
--------------------------------------------
/packit retest-failed

How to rebase through dependabot:
---------------------------------
@dependabot rebase

Executing tests for Registrar/Verifier:
---------------------------------------
tox -v -e 'mypy'

Check registrations with tenant:
--------------------------------
sudo keylime_tenant -c reglist
# It will return something like:
...
2025-05-22 14:45:52.890 - keylime.tenant - INFO - Agent list from Registrar (127.0.0.1:8891) retrieved:
{"uuids": ["b0acd25f-2205-4c37-932d-e8f99a8d39ef"]}

Check registration status for a UID:
------------------------------------
sudo keylime_tenant -c regstatus -u b0acd25f-2205-4c37-932d-e8f99a8d39ef

Install packages for registrar:
-------------------------------
alembic tornado pyasn1 pyasn1-modules
#Ubuntu:
apt install -y alembic python3-tornado python3-pyasn1 python3-pyasn1-modules python3-lark
#Fedora:
dnf install -y python3-alembic python3-gpg python3-tornado python3-pyasn1 python3-pyasn1-modules python3-lark

Install packages for agent build:
---------------------------------
#Ubuntu:
apt install -y libclang-dev libssl-dev libtss2-dev pkg-config libzmq3-dev
#Fedora:
dnf install -y openssl-devel tpm2-tss-devel systemd-devel util-linux-core zeromq-devel

Default directories to retrieve IMA/UEFI logs:
----------------------------------------------
# For IMA log:
/sys/kernel/security/ima/
# For UEFI event log:
/sys/kernel/security/tpm0/

Default files to retrieve IMA/UEFI logs:
----------------------------------------------
# For IMA log:
/sys/kernel/security/ima/ascii_runtime_measurements
# For UEFI event log:
/sys/kernel/security/tpm0/binary_bios_measurements

Information regarding Capabilities Negotiation:
-----------------------------------------------
The key_class should be asymmetric , key_algorithm rsa, the key_size should match the AK size (probably 2048), the server_identifier should be ak , the local_identifier shopuld be the TPM name (which is a hash over the public portion of the AK, probably we have the calculation implemented somewhere), and the public should be the public portion of the key.
It makes sense to have more than one AK, multiple AK can be generated under the same EK. The EK is unique.

Verifier configuration for Push Mode:
-------------------------------------
mode = push
challenge_lifetime = 1800

Agent registration in Verifier:
-------------------------------
keylime_tenant -c add --cert default -u <UUID> -t <AGENT_IP> -v <VERIFIER_IP>
keylime_tenant -c add --cert default -u <UUID>
# Alternatively, a configuration snippet at /etc/keylime/tenant.conf.d/ can be dropped or modify /etc/keylime/tenant.conf directly,
# IMPORTANT: If you are using swtpm, most probably you will have to set the require_ek_cert = False in the tenant config
#            The alternative would be to add your swtpm CA certificate to the /var/lib/keylime/tpm_cert_store

Agent removal from Verifier:
----------------------------
keylime_tenant -c delete --cert default -u <UUID> -t <AGENT_IP> -v <VERIFIER_IP>
# For localhost:
keylime_tenant -c delete --cert default -u <UUID>

Specify appropriate version through keylime_tenant:
---------------------------------------------------
keylime_tenant -c add --cert default -u <UUID> --supported-version 3.0
keylime_tenant -c add --cert default -u d432fbb3-d2f1-4a97-9ef7-75bd81c00000 --supported-version 3.0
keylime_tenant -c add --cert default -u d432fbb3-d2f1-4a97-9ef7-75bd81c00000 --supported-version 3.0 --push-model
# Add a particular tpm_policy:
sudo keylime_tenant -c update -u d432fbb3-d2f1-4a97-9ef7-75bd81c00000 --tpm_policy '{"0":"0x0000000000000000000000000000000000000000000000000000000000000000"}' --push-model

Remove quote in Tenant:
-----------------------
For Push Mode to work appropriately, tenant can not quote agent (as server is not available any more in Agent). To avoid it, comment 'do_quote' calls in tenant.py
Apart from that, next patch needs to be applied:
keylime_push_model_tenant_patch_00.txt

Check algorithms with tpm2-tools:
---------------------------------
sudo tpm2_getcap algorithms

Header to allow unwrap() on tests:
----------------------------------
//#[allow_ci]

Clarification regarding keys (AKs vs EKs):
------------------------------------------
The properties of an AK (its algorithm, size, usage rules, etc.) are defined in its own creation template when it is generated. The EK parent only serves to protect the new key. Therefore, under a single EK (e.g., an RSA 2048 key), you can create a diverse set of AKs, such as:
* An RSA 2048 AK using the RSASSA signing scheme.
* An RSA 3072 AK using the RSAPSS signing scheme.
* An Elliptic Curve (ECC) AK using the NIST P-256 curve and ECDSA scheme.

Comments regarding AK generation:
---------------------------------
* Ideally, we should only have one created, then, we should persist it to a file, then flush it, to avoid exhausting TPM2 chipset
* Creating more than one AK and send it to the verifier is not "an easy thing". It involves having to register all the keys in the registrar as well.
* For that reason, for push model MVP, we will send an array, but only containing an AK (whose parameters are taken from configuration)

AK persistence:
---------------
The AK persistence is implemented already, in the `AgentData::store()`

Clean Verifier database:
------------------------
# Delete default file:
rm /var/lib/keylime/cv_data.sqlite

Fix for Verifier "tpm_mask" issue:
--------------------------------
--- a/keylime/cloud_verifier_tornado.py
+++ b/keylime/cloud_verifier_tornado.py
@@ -530,13 +530,26 @@ class AgentsHandler(BaseHandler):
                     logger.warning("POST returning 400 response. Expected non zero content length.")
                 else:
                     json_body = json.loads(self.request.body)
+                    # Normalize tpm_policy to ensure it is a dictionary
+                    tpm_policy = json_body.get("tpm_policy")
+                    if isinstance(tpm_policy, str):
+                        try:
+                            tpm_policy = json.loads(tpm_policy)
+                        except ValueError as e:
+                            web_util.echo_json_response(
+                               self.req_handler, 400, f"TPM policy is not a valid JSON object string: {e}"
+                            )
+                            logger.warning("TPM policy provided as a string could not be decoded.")
+                            return
+
+
                     agent_data = {
                         "v": json_body.get("v", None),
                         "ip": json_body["cloudagent_ip"],
                         "port": int(json_body["cloudagent_port"]),
                         "operational_state": states.START,
                         "public_key": "",
-                        "tpm_policy": json_body["tpm_policy"],
+                        "tpm_policy": tpm_policy if tpm_policy else {},
                         "meta_data": json_body["metadata"],
                         "ima_sign_verification_keys": json_body["ima_sign_verification_keys"],
                         "revocation_key": json_body["revocation_key"],


Errors with Evidence_Collected/Evidence_Handling:
-------------------------------------------------
The code which produces the list of errors incorrectly reports an issue with "evidence_collected" when it should be "evidence_supported". See attached diff of attestation.py
As previously mentioned, the verifier does not currently expect the structure to be wrapped inside a data object. As a temporary fix, in push_attestation_controller.py, change the calls to receive_capabilities(params) (line ~208) and receive_evidence(params) (line ~262) and replace params with params.get("data", {})

attestation.py:
208 -            if self.stage == "evaluating_evidence"
208 +            if self.stage == "awaiting_evidence"

Further to previous changes, you will also probably want to change how data is returned from the verifier.Temporarily update the end of the create method in push_attestation_controller.py:
# Replace:
# self.respond(201, "Success", new_attestation.render_evidence_requested())
# With:
self.send_response(status_code=201, body={"data": new_attestation.render_evidence_requested()})

Also update the end of the update_latest method:
# Replace:
# self.respond(202, "Success", attestation.render_evidence_acknowledged())
# With:
self.send_response(status_code=202, body={"data": attestation.render_evidence_acknowledged()})

Check where Verifier is running:
--------------------------------
$ sudo ss -lntp | grep 8881
LISTEN 0      128        127.0.0.1:8881       0.0.0.0:*    users:(("python3",pid=236775,fd=4))

Mechanism to stop process in running port:
------------------------------------------
sudo kill -9 $(sudo ss -lntp | grep 8881 | awk -F "pid=" '{print $2}' | awk -F "," '{print $1}')

All in once Verifier startup:
-----------------------------
sudo kill -9 $(sudo ss -lntp | grep 8881 | awk -F "pid=" '{print $2}' | awk -F "," '{print $1}'); sudo rm /var/lib/keylime/cv_data.sqlite; sudo python3 -m keylime.cmd.verifier
# Deleting caches:
sudo kill -9 $(sudo ss -lntp | grep 8881 | awk -F "pid=" '{print $2}' | awk -F "," '{print $1}'); sudo rm /var/lib/keylime/cv_data.sqlite; for file in $(sudo find . -iname __pycache__ -print); do sudo rm -fr $file; done ; sudo python3 -m keylime.cmd.verifier

Context Initialization (logs):
------------------------------
DEBUG keylime_push_model_agent > TPM Encryption Algorithm: rsa
DEBUG keylime_push_model_agent > TPM Hash Algorithm: sha256
DEBUG keylime_push_model_agent > TPM Signing Algorithm: rsassa
DEBUG keylime_push_model_agent > Agent Data Path: /var/lib/keylime/agent_data.json

Some capabilities tpm2 useful commands:
---------------------------------------
tpm2_getcap algorithms
tpm2_getcap pcrs
tpm2_getcap commands
# To list all the possibilities:
tpm2_getcap -l

Some other useful tpm2 commands:
--------------------------------
tpm2_flushcontext -l -s -t

Update a cargo package:
-----------------------
# It is just an install (--force)
cargo install cargo-tarpaulin --force

Check attestations in Verifier:
-------------------------------
sudo sqlite3 /var/lib/keylime/cv_data.sqlite
sqlite> select * from attestations;
d432fbb3-d2f1-4a97-9ef7-75bd81c00000|0|awaiting_evidence|pending||2025-07-17T10:04:16.157360+00:00|2025-07-17T10:04:16.250892+00:00|2025-07-17T10:34:16.250892+00:00||
d432fbb3-d2f1-4a97-9ef7-75bd81c00000|1|awaiting_evidence|pending||2025-07-17T10:20:00.742014+00:00|2025-07-17T10:20:00.787738+00:00|2025-07-17T10:50:00.787738+00:00||
d432fbb3-d2f1-4a97-9ef7-75bd81c00000|2|awaiting_evidence|pending||2025-07-17T10:56:43.757472+00:00|2025-07-17T10:56:43.772229+00:00|2025-07-17T11:26:43.772229+00:00||
d432fbb3-d2f1-4a97-9ef7-75bd81c00000|3|awaiting_evidence|pending||2025-07-17T11:01:35.804211+00:00|2025-07-17T11:01:35.848834+00:00|2025-07-17T11:31:35.848834+00:00||
d432fbb3-d2f1-4a97-9ef7-75bd81c00000|4|awaiting_evidence|pending||2025-07-17T11:05:48.243680+00:00|2025-07-17T11:05:48.290229+00:00|2025-07-17T11:35:48.290229+00:00||

Creating and loading a IMA based policy:
----------------------------------------
sudo keylime-policy create runtime --ima-measurement-list -o policy.json
sudo keylime_tenant --runtime-policy policy.json --cert default -u d432fbb3-d2f1-4a97-9ef7-75bd81c00000 --supported-version 3.0 --push-model
# TPM only policy:
sudo keylime_tenant -c update -u d432fbb3-d2f1-4a97-9ef7-75bd81c00000 --tpm_policy '{"0":"0x5C4103D6DCF2A90C30A646CC090A8DE10CBE1C4A1F21C0D7D4F2F4836B2055DA"}' --push-model

Some useful testing commands:
-----------------------------
# Directory of upstream sources:
cd /var/tmp/rust-keylime_sources/
# Installation of upstream sources:
# this is a git repo with sources, do any change here (e.g. checkout) and what's there will be used for buidling
cd /var/tmp/tmt/run-040/plans/upstream-keylime-swtpm-dev/discover/default-0/tests/setup/install_upstream_rust_keylime/
./test.sh
# Test execution:
cd /var/tmp/tmt/run-040/plans/upstream-keylime-swtpm-dev/discover/default-0/tests/functional/push-attestation-on-localhost
./test.sh
